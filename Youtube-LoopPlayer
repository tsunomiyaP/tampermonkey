// ==UserScript==
// @name         Youtube LoopPlayer
// @namespace    http://tampermonkey.net/
// @version      3.0
// @description  try to take over the world!
// @author       You
// @match        https://*.youtube.com/*
// @exclude      https://music.youtube.com/*
// @exclude      https://studio.youtube.com/*
// @grant        none
// @icon         https://www.google.com/s2/favicons?domain=youtube.com
// @run-at       document-body
// @noframes
// ==/UserScript==

(function() {
  'use strict';

  // ==========================================================
  // 変数宣言
  const manager = 'ytd-page-manager#page-manager, ytm-app[id="app"]';
  const player = 'div#movie_player.html5-video-player';
  const regWatch = '/watch|/live';
  // 可変数
  let isLoop = false;
  // ==========================================================
  // 静的style適用エリア
  const elemStyle = document.createElement('style');
  elemStyle.id = 'ytStylusLoop';
  document.head.insertAdjacentElement('beforeend', elemStyle);

  elemStyle.textContent += '[id^="loop_off"] { position: fixed; bottom: 20px; right: 20px; z-index: 9999; display: inline-block; background-color: #fff; border: solid 2px #0000ff; color: #000000; border-radius: 10px; padding: 10px 30px; text-decoration: none; font-size: 1em; transition: all .3s ease 0s; } ';
  elemStyle.textContent += '[id^="loop_on"] { position: fixed; bottom: 20px; right: 20px; z-index: 9999; display: inline-block; background-color: #fff; border: solid 2px #ff0000; color: #000000; border-radius: 10px; padding: 10px 30px; text-decoration: none; font-size: 1em; transition: all .3s ease 0s; } ';
  elemStyle.textContent += '[id^="loop_"]:hover { color: #000000; background-color: #fff; transform: scale(1.2); } ';
  // ==========================================================

  // eslint-disable-next-line no-unused-vars
  const isNuN = (selector) => {
    if (selector === null || selector === undefined || selector === '') { return true; } else { return false; }
  };
  // eslint-disable-next-line no-unused-vars
  const waitQuerySelector = async (selector, node = document) => {
    let obj = null;
    while (!obj) {
      await new Promise(resolve => setTimeout(resolve, 100));
      obj = node.querySelector(selector);
    }
    return obj;
  };
  // eslint-disable-next-line no-unused-vars
  const waitQuerySelectorCount = async (cnt, selector, node = document) => {
    await new Promise(resolve => setTimeout(resolve, 1000 * cnt));
    return node.querySelector(selector);
  };
  // eslint-disable-next-line no-unused-vars
  const waitQuerySelectorIframe = async (selector1, selector2, node = document) => {
    let obj = null;
    while (!obj) {
      // iframe.contentWindow.document === iframe.contentDocument
      await new Promise(resolve => setTimeout(resolve, 500));
      obj = node.querySelector(selector1).contentDocument.querySelector(selector2);
    }
    return obj;
  };
  // eslint-disable-next-line no-unused-vars
  const deleteParam = (searchUrl, param) => {
    const base = new URL(location.protocol + '//' + location.hostname);
    const url = new URL(searchUrl, base);
    // URLSearchParamsオブジェクトを取得
    const params = url.searchParams;
    params.delete(param);

    return url;
  };
  // eslint-disable-next-line no-unused-vars
  const searchParams = (searchUrl, param) => {
    const base = new URL(location.protocol + '//' + location.hostname);
    const url = new URL(searchUrl, base);
    console.log('url section', url);
    // URLSearchParamsオブジェクトを取得
    const params = url.searchParams;

    return params.get(param);
  };
  // eslint-disable-next-line no-unused-vars
  const getParam = (name, url) => {
    if (!url) url = window.location.href;
    name = name.replace(/[\\[\]]/g, '\\$&');
    let regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
    let results = regex.exec(url);

    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, ' '));
  };
  // eslint-disable-next-line no-unused-vars
  const userAgent = () => {
    const userDevice = navigator.userAgent;
    if (userDevice.indexOf('iPhone') > 0 || userDevice.indexOf('iPod') > 0 || userDevice.indexOf('Android') > 0 && userDevice.indexOf('Mobile') > 0) {
      return false;
    } else if (userDevice.indexOf('iPad') > 0 || userDevice.indexOf('Android') > 0) {
      return false;
    } else {
      // pc
      return true;
    }
  };

  document.addEventListener('click', (e) => {
    if (e.target && e.target.id === 'loop_on') {
      isLoop = false;
      isLoopMode();
    }
  });
  document.addEventListener('click', (e) => {
    if (e.target && e.target.id === 'loop_off') {
      isLoop = true;
      isLoopMode();
    }
  });
  const isLoopMode = () => {
    if (isLoop) {
      console.log('> youtube ytPlayer isPlayer loop...');
      document.querySelector(player + ' video').loop = true;
      document.querySelector('#loop_on').style.display = 'block';
      document.querySelector('#loop_off').style.display = 'none';
    } else {
      console.log('> youtube ytPlayer isPlayer un loop...');
      document.querySelector(player + ' video').loop = false;
      document.querySelector('#loop_on').style.display = 'none';
      document.querySelector('#loop_off').style.display = 'block';
    }
  };
  const initial = async () => {
    await waitQuerySelector(manager);
    const ytPlayer = await waitQuerySelector(player);
    const stats = ytPlayer.getVideoStats() || {};
    console.log('> youtube Live status : ' + stats.live);
    if (stats.live === 'live' || stats.live === 'dvr' || stats.live === 'lp') {
      // 
      document.querySelector('[id^="loop_off"]').style.display = 'none';
      document.querySelector('[id^="loop_on"]').style.display = 'none';
    } else {
      if (!isNuN(document.querySelector('#loop_on'))) { return false; }
      console.log('> youtube movie create loop button');

      // loop Btn 絶対配置 : 初期 OFF
      const elemLoopOn = document.createElement('input');
      elemLoopOn.id = 'loop_on';
      elemLoopOn.type = 'button';
      elemLoopOn.value = 'loop on';
      document.body.insertAdjacentElement('beforeend', elemLoopOn);
      // loop Btn 絶対配置 : 初期 ON
      const elemLoopOff = document.createElement('input');
      elemLoopOff.id = 'loop_off';
      elemLoopOff.type = 'button';
      elemLoopOff.value = 'loop off';
      document.body.insertAdjacentElement('beforeend', elemLoopOff);
    }
  };
  const changeUrl = async () => {
    let href;

    const url_config = { 'attributes': false, 'childList': true, 'subtree': true };
    const url_obs = new MutationObserver(async () => {
      if (href != location.pathname) {
        // console.log('Before:', href);
        // console.log('After:', location.href);
        href = location.pathname;

        const watch = new RegExp(regWatch, 'gis');
        if (watch.test(location.pathname)) {
          await initial();
        } else {
          if (!isNuN(document.querySelector('#loop_on'))) { document.querySelector('#loop_on').remove(); }
          if (!isNuN(document.querySelector('#loop_off'))) { document.querySelector('#loop_off').remove(); }
        }
      }
    });
    url_obs.observe(document, url_config);
  };

  // URLが変更されたとき
  changeUrl();
})();
